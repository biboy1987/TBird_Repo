
first_AVR_via_Eclipse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800100  00800100  0000046e  2**0
                  ALLOC
  2 .stab         00000804  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000094c  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ef       	ldi	r30, 0xFA	; 250
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 30       	cpi	r26, 0x08	; 8
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "BT_CentralEventDispatcher_Public.h"

int main()
{
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
	BT_CentralEventDispatcher_onReset();
  d6:	0e 94 74 00 	call	0xe8	; 0xe8 <BT_CentralEventDispatcher_onReset>
	BT_CentralEventDispatcher_onCyclic();
  da:	0e 94 7d 00 	call	0xfa	; 0xfa <BT_CentralEventDispatcher_onCyclic>
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
}
  e2:	cf 91       	pop	r28
  e4:	df 91       	pop	r29
  e6:	08 95       	ret

000000e8 <BT_CentralEventDispatcher_onReset>:
#include "BT_GPTimer_Public.h"
#include "BT_LifeTimer_Public.h"

void BT_CentralEventDispatcher_onReset(void)
{
  e8:	df 93       	push	r29
  ea:	cf 93       	push	r28
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
	//Init 16bit timer
	BT_GPTimer_onReset();
  f0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <BT_GPTimer_onReset>

}
  f4:	cf 91       	pop	r28
  f6:	df 91       	pop	r29
  f8:	08 95       	ret

000000fa <BT_CentralEventDispatcher_onCyclic>:

void BT_CentralEventDispatcher_onCyclic(void)
{
  fa:	df 93       	push	r29
  fc:	cf 93       	push	r28
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		BT_LifeTimer_Api_onCyclic();
 102:	0e 94 b0 01 	call	0x360	; 0x360 <BT_LifeTimer_Api_onCyclic>
 106:	fd cf       	rjmp	.-6      	; 0x102 <BT_CentralEventDispatcher_onCyclic+0x8>

00000108 <BT_LifeTimer_S_UpdateLifeTime>:
#include "BT_LifeTimer_Private.h"

static uint64_t BT_LifeTimer_LifeTime_u64 = 0;

static void BT_LifeTimer_S_UpdateLifeTime()
{
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	df 93       	push	r29
 10e:	cf 93       	push	r28
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	ab 97       	sbiw	r28, 0x2b	; 43
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	f8 94       	cli
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	cd bf       	out	0x3d, r28	; 61
	BT_LifeTimer_LifeTime_u64 += (uint64_t)BT_GPTimer_GetTimer1Value();
 120:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <BT_GPTimer_GetTimer1Value>
 124:	8c 01       	movw	r16, r24
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	09 87       	std	Y+9, r16	; 0x09
 134:	1a 87       	std	Y+10, r17	; 0x0a
 136:	2b 87       	std	Y+11, r18	; 0x0b
 138:	3c 87       	std	Y+12, r19	; 0x0c
 13a:	4d 87       	std	Y+13, r20	; 0x0d
 13c:	5e 87       	std	Y+14, r21	; 0x0e
 13e:	6f 87       	std	Y+15, r22	; 0x0f
 140:	78 8b       	std	Y+16, r23	; 0x10
 142:	10 91 00 01 	lds	r17, 0x0100
 146:	19 83       	std	Y+1, r17	; 0x01
 148:	20 91 01 01 	lds	r18, 0x0101
 14c:	2a 83       	std	Y+2, r18	; 0x02
 14e:	30 91 02 01 	lds	r19, 0x0102
 152:	3b 83       	std	Y+3, r19	; 0x03
 154:	40 91 03 01 	lds	r20, 0x0103
 158:	4c 83       	std	Y+4, r20	; 0x04
 15a:	50 91 04 01 	lds	r21, 0x0104
 15e:	5d 83       	std	Y+5, r21	; 0x05
 160:	60 91 05 01 	lds	r22, 0x0105
 164:	6e 83       	std	Y+6, r22	; 0x06
 166:	70 91 06 01 	lds	r23, 0x0106
 16a:	7f 83       	std	Y+7, r23	; 0x07
 16c:	80 91 07 01 	lds	r24, 0x0107
 170:	88 87       	std	Y+8, r24	; 0x08
 172:	99 85       	ldd	r25, Y+9	; 0x09
 174:	09 81       	ldd	r16, Y+1	; 0x01
 176:	90 0f       	add	r25, r16
 178:	99 8b       	std	Y+17, r25	; 0x11
 17a:	11 e0       	ldi	r17, 0x01	; 1
 17c:	19 8f       	std	Y+25, r17	; 0x19
 17e:	29 89       	ldd	r18, Y+17	; 0x11
 180:	39 85       	ldd	r19, Y+9	; 0x09
 182:	23 17       	cp	r18, r19
 184:	08 f0       	brcs	.+2      	; 0x188 <BT_LifeTimer_S_UpdateLifeTime+0x80>
 186:	19 8e       	std	Y+25, r1	; 0x19
 188:	4a 85       	ldd	r20, Y+10	; 0x0a
 18a:	5a 81       	ldd	r21, Y+2	; 0x02
 18c:	45 0f       	add	r20, r21
 18e:	4a 8b       	std	Y+18, r20	; 0x12
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	6a 8f       	std	Y+26, r22	; 0x1a
 194:	7a 89       	ldd	r23, Y+18	; 0x12
 196:	8a 85       	ldd	r24, Y+10	; 0x0a
 198:	78 17       	cp	r23, r24
 19a:	08 f0       	brcs	.+2      	; 0x19e <BT_LifeTimer_S_UpdateLifeTime+0x96>
 19c:	1a 8e       	std	Y+26, r1	; 0x1a
 19e:	99 8d       	ldd	r25, Y+25	; 0x19
 1a0:	0a 89       	ldd	r16, Y+18	; 0x12
 1a2:	90 0f       	add	r25, r16
 1a4:	9b 8f       	std	Y+27, r25	; 0x1b
 1a6:	11 e0       	ldi	r17, 0x01	; 1
 1a8:	1c 8f       	std	Y+28, r17	; 0x1c
 1aa:	2b 8d       	ldd	r18, Y+27	; 0x1b
 1ac:	3a 89       	ldd	r19, Y+18	; 0x12
 1ae:	23 17       	cp	r18, r19
 1b0:	08 f0       	brcs	.+2      	; 0x1b4 <BT_LifeTimer_S_UpdateLifeTime+0xac>
 1b2:	1c 8e       	std	Y+28, r1	; 0x1c
 1b4:	4a 8d       	ldd	r20, Y+26	; 0x1a
 1b6:	5c 8d       	ldd	r21, Y+28	; 0x1c
 1b8:	45 2b       	or	r20, r21
 1ba:	4a 8f       	std	Y+26, r20	; 0x1a
 1bc:	6b 8d       	ldd	r22, Y+27	; 0x1b
 1be:	6a 8b       	std	Y+18, r22	; 0x12
 1c0:	7b 85       	ldd	r23, Y+11	; 0x0b
 1c2:	8b 81       	ldd	r24, Y+3	; 0x03
 1c4:	78 0f       	add	r23, r24
 1c6:	7b 8b       	std	Y+19, r23	; 0x13
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	9d 8f       	std	Y+29, r25	; 0x1d
 1cc:	0b 89       	ldd	r16, Y+19	; 0x13
 1ce:	1b 85       	ldd	r17, Y+11	; 0x0b
 1d0:	01 17       	cp	r16, r17
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <BT_LifeTimer_S_UpdateLifeTime+0xce>
 1d4:	1d 8e       	std	Y+29, r1	; 0x1d
 1d6:	2a 8d       	ldd	r18, Y+26	; 0x1a
 1d8:	3b 89       	ldd	r19, Y+19	; 0x13
 1da:	23 0f       	add	r18, r19
 1dc:	2e 8f       	std	Y+30, r18	; 0x1e
 1de:	41 e0       	ldi	r20, 0x01	; 1
 1e0:	4f 8f       	std	Y+31, r20	; 0x1f
 1e2:	5e 8d       	ldd	r21, Y+30	; 0x1e
 1e4:	6b 89       	ldd	r22, Y+19	; 0x13
 1e6:	56 17       	cp	r21, r22
 1e8:	08 f0       	brcs	.+2      	; 0x1ec <BT_LifeTimer_S_UpdateLifeTime+0xe4>
 1ea:	1f 8e       	std	Y+31, r1	; 0x1f
 1ec:	7d 8d       	ldd	r23, Y+29	; 0x1d
 1ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
 1f0:	78 2b       	or	r23, r24
 1f2:	7d 8f       	std	Y+29, r23	; 0x1d
 1f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
 1f6:	9b 8b       	std	Y+19, r25	; 0x13
 1f8:	0c 85       	ldd	r16, Y+12	; 0x0c
 1fa:	1c 81       	ldd	r17, Y+4	; 0x04
 1fc:	01 0f       	add	r16, r17
 1fe:	0c 8b       	std	Y+20, r16	; 0x14
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	28 a3       	std	Y+32, r18	; 0x20
 204:	3c 89       	ldd	r19, Y+20	; 0x14
 206:	4c 85       	ldd	r20, Y+12	; 0x0c
 208:	34 17       	cp	r19, r20
 20a:	08 f0       	brcs	.+2      	; 0x20e <BT_LifeTimer_S_UpdateLifeTime+0x106>
 20c:	18 a2       	std	Y+32, r1	; 0x20
 20e:	5d 8d       	ldd	r21, Y+29	; 0x1d
 210:	6c 89       	ldd	r22, Y+20	; 0x14
 212:	56 0f       	add	r21, r22
 214:	59 a3       	std	Y+33, r21	; 0x21
 216:	71 e0       	ldi	r23, 0x01	; 1
 218:	7a a3       	std	Y+34, r23	; 0x22
 21a:	89 a1       	ldd	r24, Y+33	; 0x21
 21c:	9c 89       	ldd	r25, Y+20	; 0x14
 21e:	89 17       	cp	r24, r25
 220:	08 f0       	brcs	.+2      	; 0x224 <BT_LifeTimer_S_UpdateLifeTime+0x11c>
 222:	1a a2       	std	Y+34, r1	; 0x22
 224:	08 a1       	ldd	r16, Y+32	; 0x20
 226:	1a a1       	ldd	r17, Y+34	; 0x22
 228:	01 2b       	or	r16, r17
 22a:	08 a3       	std	Y+32, r16	; 0x20
 22c:	29 a1       	ldd	r18, Y+33	; 0x21
 22e:	2c 8b       	std	Y+20, r18	; 0x14
 230:	3d 85       	ldd	r19, Y+13	; 0x0d
 232:	4d 81       	ldd	r20, Y+5	; 0x05
 234:	34 0f       	add	r19, r20
 236:	3d 8b       	std	Y+21, r19	; 0x15
 238:	51 e0       	ldi	r21, 0x01	; 1
 23a:	5b a3       	std	Y+35, r21	; 0x23
 23c:	6d 89       	ldd	r22, Y+21	; 0x15
 23e:	7d 85       	ldd	r23, Y+13	; 0x0d
 240:	67 17       	cp	r22, r23
 242:	08 f0       	brcs	.+2      	; 0x246 <BT_LifeTimer_S_UpdateLifeTime+0x13e>
 244:	1b a2       	std	Y+35, r1	; 0x23
 246:	88 a1       	ldd	r24, Y+32	; 0x20
 248:	9d 89       	ldd	r25, Y+21	; 0x15
 24a:	89 0f       	add	r24, r25
 24c:	8c a3       	std	Y+36, r24	; 0x24
 24e:	01 e0       	ldi	r16, 0x01	; 1
 250:	0d a3       	std	Y+37, r16	; 0x25
 252:	1c a1       	ldd	r17, Y+36	; 0x24
 254:	2d 89       	ldd	r18, Y+21	; 0x15
 256:	12 17       	cp	r17, r18
 258:	08 f0       	brcs	.+2      	; 0x25c <BT_LifeTimer_S_UpdateLifeTime+0x154>
 25a:	1d a2       	std	Y+37, r1	; 0x25
 25c:	3b a1       	ldd	r19, Y+35	; 0x23
 25e:	4d a1       	ldd	r20, Y+37	; 0x25
 260:	34 2b       	or	r19, r20
 262:	3b a3       	std	Y+35, r19	; 0x23
 264:	5c a1       	ldd	r21, Y+36	; 0x24
 266:	5d 8b       	std	Y+21, r21	; 0x15
 268:	6e 85       	ldd	r22, Y+14	; 0x0e
 26a:	7e 81       	ldd	r23, Y+6	; 0x06
 26c:	67 0f       	add	r22, r23
 26e:	6e 8b       	std	Y+22, r22	; 0x16
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	8e a3       	std	Y+38, r24	; 0x26
 274:	9e 89       	ldd	r25, Y+22	; 0x16
 276:	0e 85       	ldd	r16, Y+14	; 0x0e
 278:	90 17       	cp	r25, r16
 27a:	08 f0       	brcs	.+2      	; 0x27e <BT_LifeTimer_S_UpdateLifeTime+0x176>
 27c:	1e a2       	std	Y+38, r1	; 0x26
 27e:	1b a1       	ldd	r17, Y+35	; 0x23
 280:	2e 89       	ldd	r18, Y+22	; 0x16
 282:	12 0f       	add	r17, r18
 284:	1f a3       	std	Y+39, r17	; 0x27
 286:	31 e0       	ldi	r19, 0x01	; 1
 288:	38 a7       	std	Y+40, r19	; 0x28
 28a:	4f a1       	ldd	r20, Y+39	; 0x27
 28c:	5e 89       	ldd	r21, Y+22	; 0x16
 28e:	45 17       	cp	r20, r21
 290:	08 f0       	brcs	.+2      	; 0x294 <BT_LifeTimer_S_UpdateLifeTime+0x18c>
 292:	18 a6       	std	Y+40, r1	; 0x28
 294:	6e a1       	ldd	r22, Y+38	; 0x26
 296:	78 a5       	ldd	r23, Y+40	; 0x28
 298:	67 2b       	or	r22, r23
 29a:	6e a3       	std	Y+38, r22	; 0x26
 29c:	8f a1       	ldd	r24, Y+39	; 0x27
 29e:	8e 8b       	std	Y+22, r24	; 0x16
 2a0:	9f 85       	ldd	r25, Y+15	; 0x0f
 2a2:	0f 81       	ldd	r16, Y+7	; 0x07
 2a4:	90 0f       	add	r25, r16
 2a6:	9f 8b       	std	Y+23, r25	; 0x17
 2a8:	11 e0       	ldi	r17, 0x01	; 1
 2aa:	19 a7       	std	Y+41, r17	; 0x29
 2ac:	2f 89       	ldd	r18, Y+23	; 0x17
 2ae:	3f 85       	ldd	r19, Y+15	; 0x0f
 2b0:	23 17       	cp	r18, r19
 2b2:	08 f0       	brcs	.+2      	; 0x2b6 <BT_LifeTimer_S_UpdateLifeTime+0x1ae>
 2b4:	19 a6       	std	Y+41, r1	; 0x29
 2b6:	4e a1       	ldd	r20, Y+38	; 0x26
 2b8:	5f 89       	ldd	r21, Y+23	; 0x17
 2ba:	45 0f       	add	r20, r21
 2bc:	4a a7       	std	Y+42, r20	; 0x2a
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	6b a7       	std	Y+43, r22	; 0x2b
 2c2:	7a a5       	ldd	r23, Y+42	; 0x2a
 2c4:	8f 89       	ldd	r24, Y+23	; 0x17
 2c6:	78 17       	cp	r23, r24
 2c8:	08 f0       	brcs	.+2      	; 0x2cc <BT_LifeTimer_S_UpdateLifeTime+0x1c4>
 2ca:	1b a6       	std	Y+43, r1	; 0x2b
 2cc:	99 a5       	ldd	r25, Y+41	; 0x29
 2ce:	0b a5       	ldd	r16, Y+43	; 0x2b
 2d0:	90 2b       	or	r25, r16
 2d2:	99 a7       	std	Y+41, r25	; 0x29
 2d4:	1a a5       	ldd	r17, Y+42	; 0x2a
 2d6:	1f 8b       	std	Y+23, r17	; 0x17
 2d8:	28 89       	ldd	r18, Y+16	; 0x10
 2da:	38 85       	ldd	r19, Y+8	; 0x08
 2dc:	23 0f       	add	r18, r19
 2de:	28 8f       	std	Y+24, r18	; 0x18
 2e0:	89 a5       	ldd	r24, Y+41	; 0x29
 2e2:	48 8d       	ldd	r20, Y+24	; 0x18
 2e4:	84 0f       	add	r24, r20
 2e6:	88 8f       	std	Y+24, r24	; 0x18
 2e8:	29 89       	ldd	r18, Y+17	; 0x11
 2ea:	3a 89       	ldd	r19, Y+18	; 0x12
 2ec:	4b 89       	ldd	r20, Y+19	; 0x13
 2ee:	5c 89       	ldd	r21, Y+20	; 0x14
 2f0:	6d 89       	ldd	r22, Y+21	; 0x15
 2f2:	7e 89       	ldd	r23, Y+22	; 0x16
 2f4:	8f 89       	ldd	r24, Y+23	; 0x17
 2f6:	98 8d       	ldd	r25, Y+24	; 0x18
 2f8:	20 93 00 01 	sts	0x0100, r18
 2fc:	30 93 01 01 	sts	0x0101, r19
 300:	40 93 02 01 	sts	0x0102, r20
 304:	50 93 03 01 	sts	0x0103, r21
 308:	60 93 04 01 	sts	0x0104, r22
 30c:	70 93 05 01 	sts	0x0105, r23
 310:	80 93 06 01 	sts	0x0106, r24
 314:	90 93 07 01 	sts	0x0107, r25
	BT_GPTimer_ResetTimer1Value();
 318:	0e 94 e5 01 	call	0x3ca	; 0x3ca <BT_GPTimer_ResetTimer1Value>
}
 31c:	ab 96       	adiw	r28, 0x2b	; 43
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
 328:	cf 91       	pop	r28
 32a:	df 91       	pop	r29
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	08 95       	ret

00000332 <BT_LifeTimer_Api_onReset>:

void BT_LifeTimer_Api_onReset()
{
 332:	df 93       	push	r29
 334:	cf 93       	push	r28
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
	BT_LifeTimer_LifeTime_u64 = 0x0;
 33a:	10 92 00 01 	sts	0x0100, r1
 33e:	10 92 01 01 	sts	0x0101, r1
 342:	10 92 02 01 	sts	0x0102, r1
 346:	10 92 03 01 	sts	0x0103, r1
 34a:	10 92 04 01 	sts	0x0104, r1
 34e:	10 92 05 01 	sts	0x0105, r1
 352:	10 92 06 01 	sts	0x0106, r1
 356:	10 92 07 01 	sts	0x0107, r1
}
 35a:	cf 91       	pop	r28
 35c:	df 91       	pop	r29
 35e:	08 95       	ret

00000360 <BT_LifeTimer_Api_onCyclic>:

void BT_LifeTimer_Api_onCyclic()
{
 360:	df 93       	push	r29
 362:	cf 93       	push	r28
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
	BT_LifeTimer_S_UpdateLifeTime();
 368:	0e 94 84 00 	call	0x108	; 0x108 <BT_LifeTimer_S_UpdateLifeTime>
}
 36c:	cf 91       	pop	r28
 36e:	df 91       	pop	r29
 370:	08 95       	ret

00000372 <BT_GPTimer_InitTimer1>:
#include "stdint.h"
#include "BT_GPTimer_Private.h"
#include "BT_GPTimer_Public.h"

static void BT_GPTimer_InitTimer1()
{
 372:	df 93       	push	r29
 374:	cf 93       	push	r28
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
	// Timer1 to 'Normal' mode
	TCCR1A = TCCR1A & (~((uint8_t)(1 << WGM10)));
 37a:	af e4       	ldi	r26, 0x4F	; 79
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	ef e4       	ldi	r30, 0x4F	; 79
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	8e 7f       	andi	r24, 0xFE	; 254
 386:	8c 93       	st	X, r24
	TCCR1A = TCCR1A & (~((uint8_t)(1 << WGM11)));
 388:	af e4       	ldi	r26, 0x4F	; 79
 38a:	b0 e0       	ldi	r27, 0x00	; 0
 38c:	ef e4       	ldi	r30, 0x4F	; 79
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	8d 7f       	andi	r24, 0xFD	; 253
 394:	8c 93       	st	X, r24
	TCCR1B = TCCR1B & (~((uint8_t)(1 << WGM12)));
 396:	ae e4       	ldi	r26, 0x4E	; 78
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	ee e4       	ldi	r30, 0x4E	; 78
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	87 7f       	andi	r24, 0xF7	; 247
 3a2:	8c 93       	st	X, r24
	TCCR1B = TCCR1B & (~((uint8_t)(1 << WGM13)));
 3a4:	ae e4       	ldi	r26, 0x4E	; 78
 3a6:	b0 e0       	ldi	r27, 0x00	; 0
 3a8:	ee e4       	ldi	r30, 0x4E	; 78
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	8f 7e       	andi	r24, 0xEF	; 239
 3b0:	8c 93       	st	X, r24
}
 3b2:	cf 91       	pop	r28
 3b4:	df 91       	pop	r29
 3b6:	08 95       	ret

000003b8 <BT_GPTimer_onReset>:

void BT_GPTimer_onReset()
{
 3b8:	df 93       	push	r29
 3ba:	cf 93       	push	r28
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
	BT_GPTimer_InitTimer1();
 3c0:	0e 94 b9 01 	call	0x372	; 0x372 <BT_GPTimer_InitTimer1>
}
 3c4:	cf 91       	pop	r28
 3c6:	df 91       	pop	r29
 3c8:	08 95       	ret

000003ca <BT_GPTimer_ResetTimer1Value>:

void BT_GPTimer_ResetTimer1Value()
{
 3ca:	df 93       	push	r29
 3cc:	cf 93       	push	r28
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0x0000;
 3d2:	ec e4       	ldi	r30, 0x4C	; 76
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	11 82       	std	Z+1, r1	; 0x01
 3d8:	10 82       	st	Z, r1
}
 3da:	cf 91       	pop	r28
 3dc:	df 91       	pop	r29
 3de:	08 95       	ret

000003e0 <BT_GPTimer_GetTimer1Value>:


// Brief: Get the Timer1 register's value which 2^4 * 1000000 / sec
uint16_t BT_GPTimer_GetTimer1Value()
{
 3e0:	df 93       	push	r29
 3e2:	cf 93       	push	r28
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
	return ((uint16_t)TCNT1);
 3e8:	ec e4       	ldi	r30, 0x4C	; 76
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	91 81       	ldd	r25, Z+1	; 0x01
}
 3f0:	cf 91       	pop	r28
 3f2:	df 91       	pop	r29
 3f4:	08 95       	ret

000003f6 <_exit>:
 3f6:	f8 94       	cli

000003f8 <__stop_program>:
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <__stop_program>
